const selectors = {
  customerAddresses: '[data-customer-addresses]',
  addressCountrySelect: '[data-address-country-select]',
  addressContainer: '[data-address]',
  toggleAddressButton: 'button[aria-expanded]',
  cancelAddressButton: 'button[type="reset"]',
  deleteAddressButton: 'button[data-confirm-message]'
};

const attributes = {
  expanded: 'aria-expanded',
  confirmMessage: 'data-confirm-message'
};

class CustomerAddresses {
  constructor() {
    this.elements = this._getElements();
    if (Object.keys(this.elements).length === 0) {
      console.warn('No elements found for CustomerAddresses');
      return;
    }
    this._setupCountries();
    this._setupEventListeners();
  }

  _getElements() {
    const { customerAddresses, addressContainer, toggleAddressButton, cancelAddressButton, deleteAddressButton, addressCountrySelect } = selectors;
    const container = document.querySelector(customerAddresses);
    if (!container) return {};

    return {
      container,
      addressContainer: container.querySelector(addressContainer),
      toggleButtons: container.querySelectorAll(toggleAddressButton),
      cancelButtons: container.querySelectorAll(cancelAddressButton),
      deleteButtons: container.querySelectorAll(deleteAddressButton),
      countrySelects: container.querySelectorAll(addressCountrySelect)
    };
  }

  _setupCountries() {
    if (Shopify && Shopify.CountryProvinceSelector) {
      new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
        hideElement: 'AddressProvinceContainerNew'
      });
      this.elements.countrySelects.forEach((select) => {
        if (select.dataset.formId) {
          const formId = select.dataset.formId;
          new Shopify.CountryProvinceSelector(`AddressCountry_${formId}`, `AddressProvince_${formId}`, {
            hideElement: `AddressProvinceContainer_${formId}`
          });
        }
      });
    } else {
      console.warn('Shopify.CountryProvinceSelector is not available.');
    }
  }

  _setupEventListeners() {
    this.elements.toggleButtons.forEach((element) => {
      element.addEventListener('click', this._handleAddEditButtonClick);
    });
    this.elements.cancelButtons.forEach((element) => {
      element.addEventListener('click', this._handleCancelButtonClick);
    });
    this.elements.deleteButtons.forEach((element) => {
      element.addEventListener('click', this._handleDeleteButtonClick);
    });
  }

  _toggleExpanded(target) {
    if (target) {
      target.setAttribute(
        attributes.expanded,
        (target.getAttribute(attributes.expanded) === 'false').toString()
      );
    }
  }

  _handleAddEditButtonClick = ({ currentTarget }) => {
    this._toggleExpanded(currentTarget);
  }

  _handleCancelButtonClick = ({ currentTarget }) => {
    const toggleTarget = currentTarget
      .closest(selectors.addressContainer)
      ?.querySelector(`[${attributes.expanded}]`);
    this._toggleExpanded(toggleTarget);
  }

  _handleDeleteButtonClick = ({ currentTarget }) => {
    if (confirm(currentTarget.getAttribute(attributes.confirmMessage))) {
      Shopify.postLink(currentTarget.dataset.target, {
        parameters: { _method: 'delete' },
      });
    }
  }
}