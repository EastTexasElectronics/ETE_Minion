class DetailsModal extends HTMLElement {
  // Define constants for key codes
  static ESCAPE_KEY = 'Escape';
  static TAB_KEY = 'Tab';

  constructor() {
    super();
    this.initElements();
    this.focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
    this.init();
  }

  // Initialize elements with null checks
  initElements() {
    this.detailsContainer = this.querySelector('details');
    this.summaryToggle = this.querySelector('summary');
    this.buttonClose = this.querySelector('button[type="button"]');

    if (!this.detailsContainer || !this.summaryToggle || !this.buttonClose) {
      console.error('Essential elements not found in component');
    }
  }

  init() {
    if (this.detailsContainer) {
      this.detailsContainer.addEventListener('keyup', event => this.handleKeyup(event));
    }

    if (this.summaryToggle) {
      this.summaryToggle.addEventListener('click', event => this.onSummaryClick(event));
      this.summaryToggle.setAttribute('role', 'button');
      this.summaryToggle.setAttribute('aria-expanded', 'false');
    }

    if (this.buttonClose) {
      this.buttonClose.addEventListener('click', () => this.close());
    }
  }

  handleKeyup(event) {
    if (event.key === DetailsModal.ESCAPE_KEY && this.isOpen()) {
      this.close();
    }
  }

  isOpen() {
    return this.detailsContainer?.hasAttribute('open') || false;
  }

  onSummaryClick(event) {
    event.preventDefault();
    this.isOpen() ? this.close() : this.open();
  }

  onBodyClick = (event) => {
    if (!this.contains(event.target) || event.target.classList.contains('modal-overlay')) {
      this.close(false);
    }
  };

  open() {
    if (this.detailsContainer) {
      this.detailsContainer.setAttribute('open', '');
      document.body.addEventListener('click', this.onBodyClick);
      document.body.classList.add('overflow-hidden');
      this.manageFocusOnOpen();
      this.summaryToggle.setAttribute('aria-expanded', 'true');
    }
  }

  close(focusToggle = true) {
    if (this.detailsContainer) {
      this.detailsContainer.removeAttribute('open');
      document.body.removeEventListener('click', this.onBodyClick);
      document.body.classList.remove('overflow-hidden');
      if (focusToggle) {
        this.summaryToggle.focus();
      }
      this.removeFocusManagement();
      this.summaryToggle.setAttribute('aria-expanded', 'false');
    }
  }

  manageFocusOnOpen() {
    const focusableElements = this.detailsContainer.querySelectorAll(this.focusableElementsString);
    const firstFocusableElement = focusableElements[0];
    const lastFocusableElement = focusableElements[focusableElements.length - 1];

    // Trap focus within the modal
    this.detailsContainer.addEventListener('keydown', (event) => {
      if (event.key !== DetailsModal.TAB_KEY) {
        return;
      }

      if (event.shiftKey && document.activeElement === firstFocusableElement) {
        lastFocusableElement.focus();
        event.preventDefault();
      } else if (!event.shiftKey && document.activeElement === lastFocusableElement) {
        firstFocusableElement.focus();
        event.preventDefault();
      }
    });

    firstFocusableElement.focus();
  }

  removeFocusManagement() {
    // Restore focus to the summary toggle
    this.summaryToggle.focus();
  }
}

customElements.define('details-modal', DetailsModal);
