// Utility class for cookie management
class CookieManager {
  static setCookie(name, value, days) {
    const date = days ? new Date(Date.now() + days * 86400000) : null;
    document.cookie = `${name}=${encodeURIComponent(value || "")}${date ? "; expires=" + date.toUTCString() : ""}; path=/`;
  }

  static getCookie(name) {
    const cookieString = document.cookie.split('; ').find(row => row.startsWith(name + '='));
    return cookieString ? decodeURIComponent(cookieString.split('=')[1]) : '';
  }
}

// Class for recording recently viewed products
class RecordRecentlyViewedProducts extends HTMLElement {
  constructor() {
    super();
    this.name = "minion_recently_viewed";
    this.recordRecentlyViewed();
  }

  config() {
    return {
      howManyToStoreInMemory: Number(this.getAttribute('data-count')) || 5, // default to 5 if attribute is missing
      settings: this.getAttribute('data-settings')
    };
  }

  recordRecentlyViewed() {
    const config = this.config();
    let recentlyViewed = CookieManager.getCookie(this.name).split(' ');

    if (window.location.pathname.includes('/products/')) {
      const productHandleElement = document.querySelector('[data-product-handle]');
      if (productHandleElement) {
        const productHandle = productHandleElement.getAttribute('data-product-handle');
        const position = recentlyViewed.indexOf(productHandle);

        if (position === -1) {
          recentlyViewed.unshift(productHandle);
        } else {
          recentlyViewed.splice(position, 1);
          recentlyViewed.unshift(productHandle);
        }

        recentlyViewed = recentlyViewed.slice(0, config.howManyToStoreInMemory);
        CookieManager.setCookie(this.name, recentlyViewed.join(' '), 1);
      }
    }
  }
}

// Class for displaying recently viewed products
class RecentlyViewedProducts extends HTMLElement {
  constructor() {
    super();
    this.name = "minion_recently_viewed";
    this.init();
  }

  config() {
    return {
      howManyToStoreInMemory: Number(this.getAttribute('data-count')) || 5, // inherit or default to 5
      settings: this.getAttribute('data-settings')
    };
  }

  init() {
    let currentProducts = CookieManager.getCookie(this.name).split(' ');
    if (currentProducts.length <= 1) return;

    const productHandleElement = document.querySelector('[data-product-handle]');
    if (productHandleElement && window.location.pathname.includes('/products/')) {
      const productHandle = productHandleElement.getAttribute('data-product-handle');
      const index = currentProducts.indexOf(productHandle);
      if (index !== -1) currentProducts.splice(index, 1);
    }

    this.getProducts(currentProducts.join('||'));
  }

getProducts(currentProducts) {
  fetch(`${window.shopUrl}/collections/all?view=ajax_recently_viewed&constraint=${currentProducts}||${this.config().settings}`)
    .then(response => response.text())
    .then(responseText => {
      this.classList.remove("hide");
      const container = this.querySelector('.recently-viewed-products-content');
      container.innerHTML += responseText;
    })
    .catch(error => {
      this.displayErrorMessage();
    });
}

displayErrorMessage() {
  const container = this.querySelector('.recently-viewed-products-content');
  if (container) {
    container.innerHTML = "<p>Sorry, we're currently unable to display recently viewed products. Please try again later.</p>";
  }
}
}

// Define custom elements
customElements.define('recently-viewed-products', RecentlyViewedProducts);
customElements.define('recently-viewed-products-record', RecordRecentlyViewedProducts);
