class PredictiveSearch extends HTMLElement {
  constructor() {
    super();
    this.cachedResults = {};
    this.cacheSizeLimit = 20;
    this.cacheQueue = [];
    this.input = this.querySelector('input[type="search"]');
    this.predictiveSearchResults = this.querySelector('[data-predictive-search]');
    this.allPredictiveSearchInstances = document.querySelectorAll('predictive-search');
    this.isOpen = false;
    this.abortController = new AbortController();
    this.searchTerm = '';
    this.onInputChange = debounce(this.onChange.bind(this), 300);

    this.setupEventListeners();
  }

  setupEventListeners() {
    this.input.form.addEventListener('submit', this.onFormSubmit.bind(this));
    this.input.addEventListener('input', this.onInputChange);
    this.input.addEventListener('focus', this.onFocus.bind(this));
    this.addEventListener('focusout', this.onFocusOut.bind(this));
    this.addEventListener('keyup', this.onKeyup.bind(this));
    this.addEventListener('keydown', this.onKeydown.bind(this));
  }

  getQuery() {
    return this.input.value.trim();
  }

  onChange() {
    this.searchTerm = this.getQuery();

    if (!this.searchTerm.length) {
      this.close(true);
      return;
    }

    this.getSearchResults(this.searchTerm);
  }

  onFormSubmit(event) {
    if (!this.getQuery().length || this.querySelector('[aria-selected="true"] a')) {
      event.preventDefault();
    }
  }

  onFocus() {
    const currentSearchTerm = this.getQuery();

    if (!currentSearchTerm.length) return;

    if (this.searchTerm !== currentSearchTerm) {
      this.onChange();
    } else if (this.getAttribute('results') === 'true') {
      this.open();
    } else {
      this.getSearchResults(this.searchTerm);
    }
  }

  onFocusOut() {
    setTimeout(() => {
      if (!this.contains(document.activeElement)) this.close();
    }, 100);
  }

  onKeyup(event) {
    if (!this.getQuery().length) {
      this.close(true);
      return;
    }
    event.preventDefault();

    switch (event.code) {
      case 'ArrowUp':
        this.switchOption('up');
        break;
      case 'ArrowDown':
        this.switchOption('down');
        break;
      case 'Enter':
        this.selectOption();
        break;
    }
  }

  onKeydown(event) {
    if (event.code === 'ArrowUp' || event.code === 'ArrowDown') {
      event.preventDefault();
    }
  }

  switchOption(direction) {
    if (!this.getAttribute('open')) return;

    const moveUp = direction === 'up';
    const selectedElement = this.querySelector('[aria-selected="true"]');
    const allVisibleElements = Array.from(this.querySelectorAll("li, button.predictive-search__item"))
      .filter((element) => element.offsetParent !== null);

    if (moveUp && !selectedElement) return;

    let selectedElementIndex = allVisibleElements.findIndex(element => element === selectedElement);
    let nextIndex = moveUp ? (selectedElementIndex - 1 + allVisibleElements.length) % allVisibleElements.length
                           : (selectedElementIndex + 1) % allVisibleElements.length;

    if (selectedElement) {
      selectedElement.removeAttribute('aria-selected');
    }

    const nextElement = allVisibleElements[nextIndex];
    nextElement.setAttribute('aria-selected', 'true');
    this.input.setAttribute('aria-activedescendant', nextElement.id);
  }

  selectOption() {
    const selectedOption = this.querySelector('[aria-selected="true"] a, button[aria-selected="true"]');
    if (selectedOption) {
      selectedOption.click();
    }
  }

  getSearchResults(searchTerm) {
    const queryKey = searchTerm.replace(" ", "-").toLowerCase();
    this.setLiveRegionLoadingState();

    if (Object.keys(this.cachedResults).length > this.cacheSizeLimit) {
      const oldestKey = this.cacheQueue.shift();
      delete this.cachedResults[oldestKey];
    }

    if (this.cachedResults[queryKey]) {
      this.renderSearchResults(this.cachedResults[queryKey]);
      return;
    }

    this.abortController.abort();
    this.abortController = new AbortController();

    fetch(
      `${routes.predictive_search_url}?q=${encodeURIComponent(searchTerm)}&section_id=predictive-search`,
      { signal: this.abortController.signal }
    )
    .then((response) => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then((text) => {
      const resultsMarkup = new DOMParser().parseFromString(text, 'text/html')
                           .querySelector('#shopify-section-predictive-search').innerHTML;
      this.allPredictiveSearchInstances.forEach((predictiveSearchInstance) => {
        predictiveSearchInstance.cachedResults[queryKey] = resultsMarkup;
      });
      this.renderSearchResults(resultsMarkup);
    })
    .catch((error) => {
      console.error('Error fetching predictive search results:', error);
      this.displayErrorMessage(error);
    });

    this.cacheQueue.push(queryKey);
  }

  displayErrorMessage(error) {
    let errorMessage = 'Something went wrong. Please try again.';
    if (error.message.includes('Network')) {
      errorMessage = 'Unable to connect. Please check your internet connection.';
    }
    this.predictiveSearchResults.innerHTML = `<div class="error-message">${errorMessage}</div>`;
  }

  setLiveRegionLoadingState() {
    this.statusElement = this.statusElement || this.querySelector('.predictive-search-status');
    this.loadingText = this.loadingText || this.getAttribute('data-loading-text');
    this.setLiveRegionText(this.loadingText);
    this.setAttribute('loading', true);
  }

  setLiveRegionText(statusText) {
    this.statusElement.textContent = statusText;
    this.statusElement.setAttribute('aria-hidden', 'false');

    setTimeout(() => {
      this.statusElement.setAttribute('aria-hidden', 'true');
    }, 1000);
  }

  renderSearchResults(resultsMarkup) {
    this.predictiveSearchResults.innerHTML = resultsMarkup;
    this.setAttribute('results', true);
    this.setLiveRegionResults();
    this.open();
  }

  setLiveRegionResults() {
    this.removeAttribute('loading');
    this.setLiveRegionText(this.querySelector('[data-predictive-search-live-region-count-value]').textContent);
  }

  getResultsMaxHeight() {
    this.resultsMaxHeight = window.innerHeight - document.querySelector('.section-header').getBoundingClientRect().bottom;
    return this.resultsMaxHeight;
  }

  open() {
    this.predictiveSearchResults.style.maxHeight = `${this.getResultsMaxHeight()}px`;
    this.setAttribute('open', true);
    this.input.setAttribute('aria-expanded', true);
    this.isOpen = true;
  }

  close(clearSearchTerm = false) {
    this.closeResults(clearSearchTerm);
    this.isOpen = false;
  }

  closeResults(clearSearchTerm = false) {
    if (clearSearchTerm) {
      this.input.value = '';
      this.removeAttribute('results');
    }
    const selected = this.querySelector('[aria-selected="true"]');
    if (selected) {
      selected.removeAttribute('aria-selected');
    }
    this.input.removeAttribute('aria-activedescendant');
    this.removeAttribute('loading');
    this.removeAttribute('open');
    this.input.removeAttribute('aria-expanded');
    this.predictiveSearchResults.removeAttribute('style');
    this.resultsMaxHeight = null;
  }
}

customElements.define('predictive-search', PredictiveSearch);

function debounce(func, wait, immediate) {
  let timeout;
  return function executedFunction() {
    const context = this, args = arguments;
    const later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    const callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}
